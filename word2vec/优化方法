1.sigmod函数
1.1程序运行的时候直接使用sigmod函数，复杂度比较高，可以提前构造好sigmod对应的表expTable
从sigmod函数中可以看到，x<-6的时候基本为0， x>=6的时候基本为1
令MAX_EXP = 6
1.2创建sigmod表大小为EXP_TABLE_SIZE = 1000
i属于[0,EXP_TABLE_SIZ)
(i/EXP_TABLE_SIZE*2 -1) *MAX_EXP  属于 [-MAX_EXP, MAX_EXP)

expTable[i] = exp((i/EXP_TABLE_SIZE*2 -1) *MAX_EXP )
expTable[i] = expTable[i]/(expTable[i]+1)

1.3 进入sigmod函数的值为f, f<-6, sigmod_value = 0; f>=6, sigmod_value=1,其他
f = (i/EXP_TABLE_SIZE*2 -1) *MAX_EXP ==>  i=(f+MAX_EXP)*EXP_TABLE_SIZE/MAX_EXP/2
对应的sigmod为expTable[i]


EXP_TABLE_SIZE = 1000
MAX_EXP = 6
for i in range(EXP_TABLE_SIZE):
    expTable[i] = exp((i / EXP_TABLE_SIZE * 2 - 1) * MAX_EXP)
    expTable[i] = expTable[i] / (expTable[i] + 1)
 

2.负采样概率表

def InitUnigramTable(vocab_fre_dict, table_size = 1e8):
    a, i, d1, power = 0, 0, 0, 0.75
    train_words_pow = 0
    vocab_size = len(vocab_fre_dict)
    table = {}
    for a in range(vocab_size):
        train_words_pow += pow(vocab_fre_dict[a],power)
    d1 = pow(vocab_fre_dict[i], power)/train_words_pow
    for a in range(table_size):
        table[a] = i
        if (a / table_size > d1):
            i+=1
            d1 += pow(vocab_fre_dict[i], power) / train_words_pow;

        if (i >= vocab_size):
            i = vocab_size - 1
    return table





